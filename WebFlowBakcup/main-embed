<script>
//---THREE.JS---↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
let camera, scene, renderer, uniforms, scrollProgress;

init();
animate();

function init() {
  const container = document.getElementById("webGLID");

  camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);

  scene = new THREE.Scene();

  const geometry = new THREE.PlaneGeometry(2, 2);

  uniforms = {
    iAnimTimer: { value: 0.0 },
    iClick: { value: 1.0 },
    iTime: { value: 1.0 },
    iResolution: { type: "v2", value: new THREE.Vector2() },
    iMousePos: { type: "v2", value: new THREE.Vector2() },
    iAnimProgress_1: { type: "v3", value: new THREE.Vector3() },
    iAnimProgress_2: { type: "v3", value: new THREE.Vector3() },
  };
  // Vertex shader
  const vertexShaderCode = "void main() {gl_Position = vec4(position, 1.0);}";
  // Fetch the content of the fragment shader file
  fetch(
    "https://cdn.jsdelivr.net/gh/User22807/Based_animation@main/shaderSymm.glsl"
  )
    .then((response) => response.text())
    .then((fragShaderCode) => {
      const material = new THREE.ShaderMaterial({
        uniforms: uniforms,
        vertexShader: vertexShaderCode,
        fragmentShader: fragShaderCode, // Use the content fetched from the file
      });

      var mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);
      // ... (rest of your init() function)
    });

  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  container.appendChild(renderer.domElement);
  window.addEventListener("mousemove", handleMouseMove);
  window.addEventListener("resize", onWindowResize);
}

function onWindowResize() {
  uniforms.iResolution.value.x = window.innerWidth * window.devicePixelRatio;
  uniforms.iResolution.value.y = window.innerHeight * window.devicePixelRatio;

  renderer.setSize(window.innerWidth, window.innerHeight);
}
// Update mouse position uniform
function handleMouseMove(event) {
  uniforms.iMousePos.value.x = event.clientX;
  uniforms.iMousePos.value.y = window.innerHeight - event.clientY;
}

function animate() {
  requestAnimationFrame(animate);
  // Update time
  uniforms["iTime"].value = performance.now() / 1000;
  uniforms.iResolution.value.x = window.innerWidth * window.devicePixelRatio;
  uniforms.iResolution.value.y = window.innerHeight * window.devicePixelRatio;
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.render(scene, camera);
}
//---MY MAIN---↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

//---LIST COUNTER--
let counter = 0;
let counterInterval = null;
function startCounter(targetValue, speed = 2) {
  clearInterval(counterInterval); // Clear existing interval
  counterInterval = setInterval(() => {
    const step = speed;
    const direction = targetValue > counter ? 1 : -1;

    if (Math.abs(counter - targetValue) >= step) {


      counter += step * direction;
      updateColors();
      uniforms.iAnimTimer.value = counter;
    } else {
      counter = targetValue;
      updateColors();
      uniforms.iAnimTimer.value = counter;
      clearInterval(counterInterval);
    }
  }, 50);
}

function resetCounter() {
  clearInterval(counterInterval);
  counterInterval = null;
  updateColors();
}
function animCounter() {
  if (
    uniforms.iAnimProgress_1.value.x > 0.1 &&
    uniforms.iAnimProgress_1.value.y < 0.9
  ) {
    if (!counterInterval) {
      startCounter(400);
    }
  } else {
    resetCounter();
  }
}


// Intro animation timeline
const introTimeline = gsap.timeline();
introTimeline.from(uniforms.iAnimProgress_2.value, {
  z: 2,
  duration: 3.0,
});

    playButton.addEventListener('click', function() {
      if (playButton.classList.contains("active")) {
      	playButton.classList.remove('active');
        resetCounter();
				}else{
			  playButton.classList.add('active');
			  startCounter(400); // Set the initial target value
			}
    });
listItem0.addEventListener("click", function () {
  startCounter(1,30); // Set the initial target value
  playButton.classList.remove('active');
});
listItem1.addEventListener("click", function () {
  startCounter(100, 10); // Set the initial target value and speed
  playButton.classList.remove('active');
});
listItem2.addEventListener("click", function () {
  startCounter(150, 10); // Set the initial target value and speed
  playButton.classList.remove('active');
});
listItem3.addEventListener("click", function () {
  startCounter(200, 10); // Set the initial target value and speed
  playButton.classList.remove('active');
});
listItem4.addEventListener("click", function () {
  startCounter(250, 10); // Set the initial target value and speed
  playButton.classList.remove('active');
});
listItem5.addEventListener("click", function () {
  startCounter(300, 10); // Set the initial target value and speed
  playButton.classList.remove('active');
});
listItem6.addEventListener("click", function () {
  startCounter(350, 10);
  playButton.classList.remove('active');
});
$(document).ready(function () {
	sectionTwoWrap.classList.add("disabled");
	sectionFiveWrap.classList.add("disabled");
});

 $(window).scroll(function () {
 //section 2  scroll
	if (window.scrollY == sectionTwo ) {
  	sectionTwoWrap.classList.remove("disabled");
    playButton.classList.add('active');
		startCounter(400); // Set the initial target value
    }else {
  	sectionTwoWrap.classList.add("disabled");
	  counter=0;
	}
 //sections 2-3-4  scroll
 	if (window.scrollY >= sectionTwo-50 && window.scrollY < sectionFive-75 ) {
  	howItWorksBtn.classList.add("red");
    playButton.classList.add('active');
 	}else{
    howItWorksBtn.classList.remove("red");
  }
//section 5 and more  scroll
  if (window.scrollY >= sectionFive-75 ) {
  	sectionFiveWrap.classList.remove("disabled");
    scrollDownElement.style.transform = `scaleY(-1)`;
  	leanMoreBtn.classList.add("red");
	}else{
    sectionFiveWrap.classList.add("disabled");
    leanMoreBtn.classList.remove("red");
    scrollDownElement.style.transform = `scaleY(1)`;
  }
    
});

// Update colors based on the counter value

function updateColors() {

// Update progress Circle
  	var $circle = $('#svg #bar');
   	var val = counter/4; 
    var r = 24;
    var c = Math.PI*(r*2);
    var pct = ((375-val)/100)*c;
    $circle.css({ strokeDashoffset: pct});
    

  if (counter > 50 && counter <= 100) {
    listItem1.classList.add("red");
  } else {
    listItem1.classList.remove("red");
  }

  if (counter > 100 && counter <= 150) {
    listItem2.classList.add("red");
  } else {
    listItem2.classList.remove("red");
  }

  if (counter > 150 && counter <= 200) {
    listItem3.classList.add("red");
  } else {
    listItem3.classList.remove("red");
  }
  if (counter > 200 && counter <= 250) {
    listItem4.classList.add("red");
  } else {
    listItem4.classList.remove("red");
  }

  if (counter > 250 && counter <= 300) {
    listItem5.classList.add("red");
  } else {
    listItem5.classList.remove("red");
  }
  if (counter > 300 && counter <= 350) {
    listItem6.classList.add("red");
  } else {
    listItem6.classList.remove("red");
  }
  if (counter >= 399 ) {
    counter=0; // Set the initial target value
  }

}

//---GSAP---
gsap.to(uniforms.iAnimProgress_1.value, {
  x: 1,
  scrollTrigger: {
    trigger: "#home",
    start: "0%",
    end: "100%",
    scrub: true,
    onUpdate: animCounter,

  },
});

gsap.to(uniforms.iAnimProgress_1.value, {
  y: 1,
  scrollTrigger: {
    trigger: "#howItWorks1",
    start: "0%",
    end: "100%",
    scrub: true,
    onUpdate: animCounter,
  },
});

gsap.to(uniforms.iAnimProgress_1.value, {
  z: 1,
  scrollTrigger: {
    trigger: "#howItWorks2",
    start: "0%",
    end: "100%",
    scrub: true,
  },
});

gsap.to(uniforms.iAnimProgress_2.value, {
  x: 1,
  scrollTrigger: {
    trigger: "#howItWorks3",
    start: "0%",
    end: "100%",
    scrub: true,
  },
});
gsap.to(uniforms.iAnimProgress_2.value, {
  y: 1,
  scrollTrigger: {
    trigger: "#reachus",
    start: "0%",
    end: "100%",
    scrub: true,
  },
});
</script>